16S_Mycoplasma_penetrans:0.03919,
16S_Mycoplasma_iowae:0.03577)
:0.00363,
16S_Mycoplasma_microti:0.02446)
:0.03226)
:0.05102,
16S_Ureaplasma_felinum:0.03149)
:0.00478,
16S_Ureaplasma_gallorale:0.01379)
:0.01067,
16S_Ureaplasma_parvum:0.00318)
:0.00401,
16S_Ureaplasma_urealyticum_1:0.00035,
16S_Ureaplasma_urealyticum:0.00036);"
treetext2 <- "(
(
(
(
(
(
RpoA_Mycoplasma_pneumoniae:0.06220,
RpoA_Mycoplasma_genitalium:0.06954)
:0.35144,
(
(
RpoA_Mycoplasma_pyrum:0.24237,
RpoA_Mycoplasma_gallisepticum:0.27290)
:0.10064,
(
(
RpoA_Mycoplasma_iowae:0.19878,
RpoA_Mycoplasma_penetrans:0.21059)
:0.16573,
(
RpoA_Ureaplasma_parvum:-0.00161,
RpoA_Ureaplasma_urealyticum:0.00488)
:0.49887)
:0.04242)
:0.03054)
:0.10264,
RpoA_Clostridium_difficile:0.51321)
:0.19813,
(
RpoA_Spiroplasma_mirum:0.05761,
RpoA_Spiroplasma_syrphidicola:0.07803)
:0.17627)
:0.08233,
(
(
(
RpoA_Spiroplasma_taiwanense:0.04704,
RpoA_Spiroplasma_diminutum:0.03934)
:0.03243,
RpoA_Spiroplasma_culicola:0.06198)
:0.11222,
RpoA_Acholeplasma_multilocale:0.09253)
:0.03132)
:0.01770,
(
RpoA_Mycoplasma_mycoides:0.11938,
RpoA_Mycoplasma_putrefaciens:0.10323)
:0.04609,
RpoA_Mesoplasma_florum:0.24959);"
treetext1 <- gsub('\n', "", treetext1)
treetext2 <- gsub('\n', "", treetext2)
tree1 <- read.tree(text=treetext1)
tree2 <- read.tree(text=treetext2)
cophyloplot(tree1, tree2,
assoc = as.matrix(cbind(tree1$tip.label,tree1$tip.label)),
col=c("red","blue","yellow","green","black","brown","orange",
"pink","purple","cyan","gray"))
tree1.labels <- tree1$tip.label
tree2.labels <- tree2$tip.label
tree1.labels==tree2.labels
tree1.labels==tree2.labels[i]
for in in seq(1:18)
for i in seq(1:18)
for (i in seq(1:18)) tree1.labels==tree2.labels[i]
for (i in seq(1:18)) print(tree1.labels==tree2.labels[i])
tree1.labels[1]
tree1.labels[1].subset('_')
tree1.labels[1].subset()
tree1.labels[1].subset(1)
?subset
subset(tree1.labels[1],1)
subset(tree1.labels[1],1:3)
subset(tree1.labels[1],T)
?subset2
?substr
substr(tree1.labels[1],4)
substr(tree1.labels[1],4:)
substr(tree1.labels[1],4,length(tree1.labels[1]))
substr(tree1.labels[1],1,length(tree1.labels[1]))
length(tree1.labels[1])
lengths(tree1.labels[1])
dim(tree1.labels[1])
substring(tree1.labels[1],1:6)
substring(tree1.labels[1],1)
substring(tree1.labels[1],2)
substring(tree1.labels[1],5)
for (i in seq(1:18)) print(substring(tree1.labels,5)==substring(tree2.labels[i],6))
for (i in seq(1:18)) x<-substring(tree1.labels,5)==substring(tree2.labels[i],6)
x
for (i in seq(1:18)) x<-(substring(tree1.labels,5)==substring(tree2.labels[i],6))
x
for (i in seq(1:18)) x[i]<-(substring(tree1.labels,5)==substring(tree2.labels[i],6))
x
warnings()
rm(x)
for (i in seq(1:18)) x[i]<-(substring(tree1.labels,5)==substring(tree2.labels[i],6))
library(ape)
treetext1 <- ""
treetext2 <- ""
treetext1 <- gsub('\n', "", treetext1)
treetext2 <- gsub('\n', "", treetext2)
tree1 <- read.tree(text=treetext1)
tree2 <- read.tree(text=treetext2)
cophyloplot(tree1, tree2,
assoc = as.matrix(cbind(tree1$tip.label,tree1$tip.label)),
col=c("red","blue","yellow","green","black","brown","orange",
"pink","purple","cyan","gray"))
rm(list = ls)
rm(ls)
rm(tree1)
rm(list=ls)
rm(list=*)
rm(ls=list)
rm(list)
rm(ls)
exit
install.packages("ISLR")
library(ISLR)
set.seed(1)
train <- sample(392, 196)
library(MASS)
lm.fit <- lm(mpg~horsepower, data = Auto, subset = train)
attach(auto)
attach(Auto)
mean((mpg~predict(lm.fit, Auto))[-train]^2)
mean((mpg~predict(lm.fit, Auto))[-train]^2)
mean((mpg~predict(lm.fit, Auto))[-train]^2)
mean((mpg-predict(lm.fit, Auto))[-train]^2)
lm.fit2 <- lm(mpg~poly(horsepower,2), data = Auto, subset = train)
mean((mpg-predict(lm.fit2, Auto))[-train]^2)
lm.fit3 <- lm(mpg~poly(horsepower,3), data = Auto, subset = train)
mean((mpg-predict(lm.fit3, Auto))[-train]^2)
set.seed(2)
train <- sample(392, 196)
lm.fit <- lm(mpg~horsepower, data = Auto, subset = train)
attach(Auto)
mean((mpg-predict(lm.fit, Auto))[-train]^2)
lm.fit2 <- lm(mpg~poly(horsepower,2), data = Auto, subset = train)
mean((mpg-predict(lm.fit2, Auto))[-train]^2)
lm.fit3 <- lm(mpg~poly(horsepower,3), data = Auto, subset = train)
mean((mpg-predict(lm.fit3, Auto))[-train]^2)
summary(lm.fit)
summary(lm.fit2)
summary(lm.fit3)
glm.fit <- glm(mpg~ horsepower, data = Auto)
coef(glm.fit)
coef(lm.fit)
library(boot)
cv.err <- cv.glm(Auto, glm.fit)
cv.err$delta
cv.error <- rep(0,5)
for(i in 1:5){
glm.fit <- glm(mpg~ poly(horsepower, i), data = Auto)
cv.error[i] <- cv.glm(Auto, glm.fit)$delta[1]
}
cv.error
plot(cv.error)
plot(cv.error, type = 'l')
set.seed(17)
cv.error.10 <- rep(0,10)
for(i in 1:10){
glm.fit <- glm(mpg~ poly(horsepower, i), data = Auto)
cv.error.10[i] <- cv.glm(Auto, glm.fit, K = 10)$delta[1]
}
cv.error
cv.error.10
alpha.fn <- function(data, index){
X <- data$X[index]
Y <- data$Y[index]
return ((var(Y)-cov(X,Y))/(var(X)+var(Y)-2*cov(X,Y)))
}
attach(Portfolio)
alpha.fn(Portfolio, 100)
alpha.fn(Portfolio, 1:100)
set.seed(1)
alpha.fn(Portfolio, sample(100,100,replace=T))
set.seed(1)
alpha.fn(Portfolio, sample(100,100,replace=T))
boot(Portfolio, alpha.fn, R = 1000)
boot.fn <- function(data, index){
return (coef(lm(mpg~horsepower, data = data, subset = index)))
}
boot.fn(Auto, 1:392)
set.seed(1)
boot.fn(Auto, sample(392, 392, replace =T))
boot.fn(Auto, sample(392, 392, replace =T))
boot.fn(Auto, sample(392, 392, replace =T))
boot.fn(Auto, sample(392, 392, replace =T))
boot(Auto, boot.fn, 1000)
X = rnorm(100)
set.seed(21)
X = rnorm(100)
e = rnorm(100)
set.seed(21)
X = rnorm(100)
ep = rnorm(100)
set.seed(21)
X = rnorm(100)
ep = rnorm(100)
Y = 1 + 3.7 * X + -0.25 * X^2 + 1.04 * X^3 + ep
?regsubset
??regsubset
library(leaps)
df <- data.frame(y=Y,x=X)
best <- regsubsets(Y~X, data = df)
names(df)
df <- data.frame(Y=Y,X=X)
best <- regsubsets(Y~X, data = df)
names(df)
View(df)
?poly
regfit.full <- regsubsets(Y~poly(X, degree = 10, nvmax = 15), data = df)
summary(regfit.full)
regfit.full$rss
reg.summary <- summary(regfit.full)
reg.summary$rsq
reg.summary$cp
reg.summary$bic
par(mfrow = c(2,2))
plot(reg.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted R2", type = "l")
plot(reg.summary$cp, xlab = "Number of Variables", ylab = "CP", type = "l")
plot(reg.summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
regfit.full <- regsubsets(Y~poly(X, degree = 10, nvmax = 10), data = df)
reg.summary <- summary(regfit.full)
par(mfrow = c(2,2))
plot(reg.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted R2", type = "l")
plot(reg.summary$cp, xlab = "Number of Variables", ylab = "CP", type = "l")
plot(reg.summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
which.max(reg.summary$adjr2)
which.max(reg.summary$rsq)
which.max(reg.summary$cp)
which.min(reg.summary$cp)
which.min(reg.summary$bic)
par(mfrow = c(1,1))
plot(regfit.full, scale = "bic")
plot(regfit.full, scale = "adjr2")
which.max(reg.summary$adjr2)
which.max(reg.summary$rsq)
which.min(reg.summary$cp)
which.min(reg.summary$bic)
par(mfrow = c(2,2))
plot(reg.summary$adjr2, xlab = "Number of Variables", ylab = "Adjusted R2", type = "l")
plot(reg.summary$cp, xlab = "Number of Variables", ylab = "CP", type = "l")
plot(reg.summary$bic, xlab = "Number of Variables", ylab = "BIC", type = "l")
reg.summary$which
regfit.full$first
regfit.full$vorder
coef(regfit.full, 3)
library(ISLR)
fix(Hitters)
names(hitters)
names(Hitters)
dim(Hitters)
sum(is.na(Hitters))
Hitters <- na.omit(Hitters)
dim(Hitters)
sum(is.na(Hitters))
library(leaps)
regfits.full <- regsubsets(Salary~., Hitters)
summary(regfits.full)
regfits.full <- regsubsets(Salary~., data = Hitters, nvmax = 19)
summary(regfits.full)
reg.summary <- summary(regfits.full)
plot(summary(reg.summary$rsq)
)
plot(summary(reg.summary$rsq))
reg.summary$rsq
plot(reg.summary$rsq, type='l')
plot(reg.summary$adjr2, type='l')
plot(reg.summary$rss, type='l')
plot(reg.summary$bic, type='l')
plot(reg.summary$aic, type='l')
plot(reg.summary$cp, type='l')
plot(reg.summary$adjr2, type='l')
points(which.max(reg.summary$adjr2), col = 'red', cex = 2, pch = 20)
points(which.max(reg.summary$adjr2), reg.summary$adjr2[11], col = 'red', cex = 2, pch = 20)
points(which.max(reg.summary$adjr2), reg.summary$adjr2[11], col = 'red', cex = 2, pch = 21)
points(which.max(reg.summary$adjr2), reg.summary$adjr2[11], col = 'red', cex = 2, pch = 19)
reg.summary <- summary(regfits.full)
plot(reg.summary$adjr2, type='l')
points(which.max(reg.summary$adjr2), reg.summary$adjr2[11], col = 'red', cex = 2, pch = 19)
plot(reg.summary$adjr2, type='l')
points(which.max(reg.summary$adjr2), reg.summary$adjr2[11], col = 'red', cex = 2, pch = 9)
points(which.max(reg.summary$adjr2), reg.summary$adjr2[11], col = 'red', cex = 2, pch = 10)
points(which.max(reg.summary$adjr2), reg.summary$adjr2[11], col = 'red', cex = 2, pch = 12)
points(which.max(reg.summary$adjr2), reg.summary$adjr2[11], col = 'red', cex = 2, pch = 'x')
regfits.full <- regsubsets(Salary~., data = Hitters, nvmax = 19)
reg.summary <- summary(regfits.full)
plot(reg.summary$adjr2, type='l')
reg.summary$rsq
points(which.max(reg.summary$adjr2), reg.summary$adjr2[11], col = 'red', cex = 2, pch = 'x')
points(which.max(reg.summary$adjr2), reg.summary$adjr2[11], col = 'red', cex = 2, pch = '.')
points(which.max(reg.summary$adjr2), reg.summary$adjr2[11], col = 'red', cex = 2, pch = 20)
plot(regfits.full, scale = "r2")
plot(regfits.full, scale = "bic")
?plot.regsubsets
plot(regfits.full, scale = "bic")
?regsubsets
regfits.fwd <- regsubsets(Salary~., data = Hitters, method = "forward")
summary(regfit.fwd)
regfit.fwd <- regsubsets(Salary~., data = Hitters, method = "forward")
summary(regfit.fwd)
regfit.bwd <- regsubsets(Salary~., data = Hitters, method = "backward")
summary(regfit.bwd)
set.seed(1)
train <- sample(c(T, F), nrow(Hitters), rep = T)
test <- (!train)
regfit.best <- regsubsets(Salary~., data = Hitters[train,], nvmax = 19)
test.mat <- model.matrix(Salary~., data = Hitters[test,])
val.errors <- rep(NA, 19)
test.mat <- model.matrix(Salary~., data = Hitters[test,])
val.errors <- rep(NA, 19)
for(i in 1:19){
coefi <- coef(regfit.best, id = i)
pred <- test.mat[, names(coefi)]%*%coefi
val.errors[i] <- mean((Hitters$Salary[test]~pred)^2)
}
for(i in 1:19){
coefi <- coef(regfit.best, id = i)
pred <- test.mat[, names(coefi)]%*%coefi
val.errors[i] <- mean((Hitters$Salary[test]-pred)^2)
}
View(test.mat)
val.errors
plot(val.errors, type = "l")
library(ISLR)
fix(Hitters)
names(Hitters)
dim(Hitters)
sum(is.na(Hitters))
Hitters <- na.omit(Hitters)
library(leaps)
regfits.full <- regsubsets(Salary~., data = Hitters, nvmax = 19)
reg.summary <- summary(regfits.full)
plot(reg.summary$adjr2, type='l')
reg.summary$rsq
points(which.max(reg.summary$adjr2), reg.summary$adjr2[11], col = 'red', cex = 2, pch = 20)
plot(regfits.full, scale = "bic")
#Forward and Backward
regfit.fwd <- regsubsets(Salary~., data = Hitters, method = "forward")
summary(regfit.fwd)
regfit.bwd <- regsubsets(Salary~., data = Hitters, method = "backward")
summary(regfit.bwd)
#Validation set and CV
set.seed(1)
train <- sample(c(T, F), nrow(Hitters), rep = T)
test <- (!train)
regfit.best <- regsubsets(Salary~., data = Hitters[train,], nvmax = 19)
test.mat <- model.matrix(Salary~., data = Hitters[test,])
val.errors <- rep(NA, 19)
for(i in 1:19){
coefi <- coef(regfit.best, id = i)
pred <- test.mat[, names(coefi)]%*%coefi
val.errors[i] <- mean((Hitters$Salary[test]-pred)^2)
}
val.errors
plot(val.errors, type = "l")
predict.regsubsets <- function(object, newdata, id, ...){}
predict.regsubsets <- function(object, newdata, id, ...){
form <- as.formula(object$call[[2]])
mat <- model.matrix(form, newdata)
coefi <- coefi(object, id=id)
xvars <- names(coefi)
mat[,xvars]%*%coefi
}
regfit.best <- regsubsets(Salary~., data = Hitters, nvmax = 19)
coef(regfit.best, 10)
coef(regfit, 10)
for(i in 1:19){
coefi <- coef(regfit.best, id = i)
pred <- test.mat[, names(coefi)]%*%coefi
val.errors[i] <- mean((Hitters$Salary[test]-pred)^2)
}
val.errors
plot(val.errors, type = "l")
coef(regfit, 10)
coef(regfit.best, 10)
set.seed(1)
train <- sample(c(T, F), nrow(Hitters), rep = T)
test <- (!train)
regfit.best <- regsubsets(Salary~., data = Hitters[train,], nvmax = 19)
test.mat <- model.matrix(Salary~., data = Hitters[test,])
val.errors <- rep(NA, 19)
for(i in 1:19){
coefi <- coef(regfit.best, id = i)
pred <- test.mat[, names(coefi)]%*%coefi
val.errors[i] <- mean((Hitters$Salary[test]-pred)^2)
}
val.errors
plot(val.errors, type = "l")
coef(regfit.best, 10)
regfit.best <- regsubsets(Salary~., data = Hitters, nvmax = 19)
coef(regfit.best, 10)
k <- 10
set.seed(1)
folds <- sample(1:k, nrow(Hitters), repalce = T)
folds <- sample(1:k, nrow(Hitters), replace = T)
cv.errors <- matrix(NA, k, 19, dimnames = list(NULL, paste(1:19)))
for(j in 1:k){
best.fit <- regsubsets(Salary~., data = Hitters[folds!=j,], nvmax = 19)
for(i in 1:19){
pred <- predict(best.fit, Hitters[folds == j,], id=i)
cv.errors[j,i] <- mean((Hitters$Salary[folds == j]-pred)^2)
}
}
predict.regsubsets <- function(object, newdata, id, ...){
form <- as.formula(object$call[[2]])
mat <- model.matrix(form, newdata)
coefi <- coef(object, id=id)
xvars <- names(coefi)
mat[,xvars]%*%coefi
}
for(j in 1:k){
best.fit <- regsubsets(Salary~., data = Hitters[folds!=j,], nvmax = 19)
for(i in 1:19){
pred <- predict(best.fit, Hitters[folds == j,], id=i)
cv.errors[j,i] <- mean((Hitters$Salary[folds == j]-pred)^2)
}
}
cv.errors
mean.cv.errors <- apply(cv.errors, 2, mean)
mean.cv.errors
which.min(mean.cv.errors)
plot(mean.cv.errors, type  = 'l')
plot(mean.cv.errors, type  = 'b')
plot(mean.cv.errors, type  = 'x')
plot(mean.cv.errors, type  = 'a')
plot(mean.cv.errors, type  = 'b')
reg.best <- regsubsets(Salary~., data = Hitters, nvmax = 19)
coef(reg.best, 11)
library(glmnet)
setwd("/home/hamed/KUL/SEM2/stat/Rob/Labs+exercises/vijver/")
load("VIJVER.Rdata")
data$meta <- factor(data$meta)
#dummy coding : DM->1 , NODM->0
phenotype = ifelse(data$meta == "DM", 1, 0)
data <- cbind(phenotype,data[,-1])
name(data)[1]
names(data)[1]
names(data)[2]
names(data)[3]
logit.gene1 <- glm(phenotype ~ NM_003258, data = data, family = binomial(link = "logit"))
logit.gene1$model
logit.gene1$xlevels
logit.gene1$terms
summary(logit.gene1)
summary(logit.gene1)[1]
summary(logit.gene1)[2]
summary(logit.gene1)[3]
summary(logit.gene1)[3][1]
summary(logit.gene1)[3][2]
summary(logit.gene1)[[1]]
summary(logit.gene1)[[2]]
summary(logit.gene1)[[3]]
summary(logit.gene1)[[4]]
summary(logit.gene1)[[5]]
summary(logit.gene1)[[6]]
summary(logit.gene1$coefficients)
summary(logit.gene1)$coef
summary(logit.gene1)$coef[2,4]
sig_vars <- rep(NA, ncol(data))
pvals <- rep(NA, ncol(data))
sig_vars <- rep(FALSE, ncol(data))
pvals <- rep(NA, ncol(data))
for (i in 1:ncol(data)){
logit.fit <- glm(phenotype ~ names(data)[i], data = data, family = binomial(link = "logit"))
sig_vars[i] <- TRUE
pvals[i] <- summary(logit.fit)$coef[2,4]
}
sig_vars <- rep(FALSE, ncol(data))
pvals <- rep(NA, ncol(data))
for (i in 2:ncol(data)){
logit.fit <- glm(phenotype ~ names(data)[i], data = data, family = binomial(link = "logit"))
sig_vars[i] <- TRUE
pvals[i] <- summary(logit.fit)$coef[2,4]
}
logit.fit <- glm(phenotype ~ names(data)[1], data = data, family = binomial(link = "logit"))
names(data)[1]
logit.fit <- glm(phenotype ~ names(data)[2], data = data, family = binomial(link = "logit"))
names(data)[2]
logit.fit <- glm(phenotype ~ J00129, data = data, family = binomial(link = "logit"))
logit.fit <- glm(phenotype ~ "J00129", data = data, family = binomial(link = "logit"))
paste(names(data)[2], collapse = '')
names(data)[2]
as.character(names(data)[2])
sig_vars <- rep(FALSE, ncol(data))
pvals <- rep(NA, ncol(data))
for (i in 2:ncol(data)){
formula <- paste("phenotype ~", names(data)[i], collapse = '', sep = '')
logit.fit <- glm(formula, data = data, family = binomial(link = "logit"))
sig_vars[i] <- TRUE
pvals[i] <- summary(logit.fit)$coef[2,4]
}
pvals
table(pvals<0.05)
table(pvals<0.005)
table(pvals<0.001)
rm(list = ls())
